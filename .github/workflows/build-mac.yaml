name: Build DMG package
on: [push]
jobs:
  Build-Intel-Package:
    runs-on: macos-12
    steps:
      - name: Check out repository code
        uses: actions/checkout@v4
      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: '20'
      - name: Init venv
        run: |
          python -m venv ${{ github.workspace }}/.venv3
          ${{ github.workspace }}/.venv3/bin/python -m pip install --upgrade pip wheel setuptools
      - name: Install the backend Python package
        run: |
          ${{ github.workspace }}/.venv3/bin/python -m pip install ${{ github.workspace }}/backend[dev]
      - name: Build PyInstaller-based binary
        run: |
          cd ${{ github.workspace }}/backend
          ${{ github.workspace }}/.venv3/bin/pyinstaller ./backend.spec
      - name: Install Node dependencies
        run: |
          cd ${{ github.workspace }}/app
          npm ci
          cd -
      - name: Check TS code
        run: |
          cd ${{ github.workspace }}/app
          ./node_modules/.bin/tsc --noEmit
          cd -
      - name: Build Electron app
        run: |
          cd ${{ github.workspace }}/app
          ./node_modules/.bin/vite build
          ./node_modules/.bin/electron-builder
      - name: Run the backend unit tests
        run: |
          ${{ github.workspace }}/.venv3/bin/pytest ${{ github.workspace }}/backend
      - name: Run the frontend unit tests
        run: |
          cd ${{ github.workspace }}/app
          ./node_modules/.bin/vitest --browser.name=chrome --browser.headless
      - name: Setup the chromedriver
        uses: nanasess/setup-chromedriver@v2
        with:
          chromedriver-version: '120'
      - name: Run the e2e tests
        run: |
          ${{ github.workspace }}/.venv3/bin/python -m pip install -e ${{ github.workspace }}/e2e
          mkdir ${{ github.workspace }}/screenshots
          E2E_SCREENSHOTS_PATH=${{ github.workspace }}/screenshots ${{ github.workspace }}/.venv3/bin/pytest ${{ github.workspace }}/e2e
      - name: Save screenshots on failure
        uses: actions/upload-artifact@v4
        if: failure()
        with:
          name: screenshots-x64_64
          path: ${{ github.workspace }}/screenshots
          retention-days: 7
      - name: Archive the built app
        uses: actions/upload-artifact@v4
        with:
          name: simpledam_x86_64_dmg_package
          path: ${{ github.workspace }}/app/dist-electron/*.dmg
          if-no-files-found: error
          retention-days: 7

  Build-Arm-Package:
    runs-on: macos-14
    steps:
      - name: Check out repository code
        uses: actions/checkout@v4
      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: '20'
      - name: Init venv
        run: |
          python -m venv ${{ github.workspace }}/.venv3
          ${{ github.workspace }}/.venv3/bin/python -m pip install --upgrade pip wheel setuptools
      - name: Custom-build rawpy (it has no arm64 distribution)
        run: |
          ${{ github.workspace }}/.venv3/bin/python -m pip install Cython==3.0.8 numpy==1.26.3
          git clone --branch v0.19.0 "https://github.com/letmaik/rawpy" ${{ github.workspace }}/rawpy
          cd ${{ github.workspace }}/rawpy
          # Force the libRaw compilation.
          sed -i '' 's/needsCompile = any.*/needsCompile = True/g' setup.py
          RAWPY_BUILD_GPL_CODE=1 ${{ github.workspace }}/.venv3/bin/python setup.py bdist_wheel
          ${{ github.workspace }}/.venv3/bin/python -m pip install ${{ github.workspace }}/rawpy/dist/*.whl
          cd -
      - name: Install the backend Python package
        run: |
          ${{ github.workspace }}/.venv3/bin/python -m pip install ${{ github.workspace }}/backend[dev]
      - name: Build PyInstaller-based binary
        run: |
          cd ${{ github.workspace }}/backend
          ${{ github.workspace }}/.venv3/bin/pyinstaller ./backend.spec
      - name: Install Node dependencies
        run: |
          cd ${{ github.workspace }}/app
          npm ci
          cd -
      - name: Check TS code
        run: |
          cd ${{ github.workspace }}/app
          ./node_modules/.bin/tsc --noEmit
          cd -
      - name: Build Electron app
        env:
          CSC_LINK: ${{ secrets.CSC_LINK }}
          CSC_KEY_PASSWORD: ${{ secrets.CSC_KEY_PASSWORD }}
        run: |
          # Make sure that `security add-trusted-cert` won't ask for the password.
          sudo security authorizationdb write com.apple.trust-settings.user allow
          # Make sure that the self-signed signing certificate is trusted.
          cd ${{ github.workspace }}
          echo "${{ secrets.CSC_LINK }}" | base64 --decode > ${{ github.workspace }}/simpledam-self-signed.p12
          openssl pkcs12 -in simpledam-self-signed.p12 -clcerts -nokeys -password pass:$CSC_KEY_PASSWORD -out simpledam-self-signed.cert
          security import simpledam-self-signed.p12 -P $CSC_KEY_PASSWORD
          security add-trusted-cert -p codeSign ./simpledam-self-signed.cert
          # Build the app.
          cd ${{ github.workspace }}/app
          ./node_modules/.bin/vite build
          ./node_modules/.bin/electron-builder
      - name: Run the backend unit tests
        run: |
          ${{ github.workspace }}/.venv3/bin/pytest ${{ github.workspace }}/backend
      - name: Run the frontend unit tests
        run: |
          cd ${{ github.workspace }}/app
          ./node_modules/.bin/vitest --browser.name=chrome --browser.headless
      - name: Setup the chromedriver
        uses: nanasess/setup-chromedriver@v2
        with:
          chromedriver-version: '120'
      - name: Run the e2e tests
        run: |
          ${{ github.workspace }}/.venv3/bin/python -m pip install -e ${{ github.workspace }}/e2e
          mkdir ${{ github.workspace }}/screenshots
          E2E_SCREENSHOTS_PATH=${{ github.workspace }}/screenshots ${{ github.workspace }}/.venv3/bin/pytest ${{ github.workspace }}/e2e
      - name: Save screenshots on failure
        uses: actions/upload-artifact@v4
        if: failure()
        with:
          name: screenshots-arm64
          path: ${{ github.workspace }}/screenshots
          retention-days: 7
      - name: Archive the built app
        uses: actions/upload-artifact@v4
        with:
          name: simpledam_arm64_dmg_package
          path: ${{ github.workspace }}/app/dist-electron/*.dmg
          if-no-files-found: error
          retention-days: 7
